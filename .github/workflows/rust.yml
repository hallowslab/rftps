name: Rust Build and Release

on:
  push:
    branches: [ "main" ]
    tags:
      - "v*.*.*"  # Runs on versioned tags like v1.0.0
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  setup:
    name: Set Matrix Targets
    runs-on: ubuntu-latest
    steps:
      - name: Set Matrix Targets
        id: set_targets
        # Target order
        # 0 - Linux
        # 1 - Apple X64
        # 2 - Apple aarch64/ARM
        # 3 - Windows
        run: |
          echo "targets=[\"x86_64-unknown-linux-gnu\",\"x86_64-apple-darwin\",\"aarch64-apple-darwin\",\"x86_64-pc-windows-msvc\"]" >> $GITHUB_OUTPUT

  test:
    name: Test for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        include: 
          - os: ubuntu-latest
            target: ${{ fromJson(needs.setup.outputs.targets)[0] }}
          - os: macos-latest
            target: ${{ fromJson(needs.setup.outputs.targets)[1] }}
          - os: macos-latest
            target: ${{ fromJson(needs.setup.outputs.targets)[2] }}
          - os: windows-latest
            target: ${{ fromJson(needs.setup.outputs.targets)[3] }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run tests
        run: |
          echo "Running tests for ${{ matrix.target }} on ${{ matrix.os }}"
          cargo test

    

  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: setup

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: ${{ fromJson(needs.setup.outputs.targets)[0] }}
            ext: ""
            features: "--features include_pem_files"
          - os: macos-latest
            target: ${{ fromJson(needs.setup.outputs.targets)[1] }}
            ext: ""
            features: "--features include_pem_files"
          - os: macos-latest
            target: ${{ fromJson(needs.setup.outputs.targets)[2] }}
            ext: ""
            features: "--features include_pem_files"
          - os: windows-latest
            target: ${{ fromJson(needs.setup.outputs.targets)[3] }}
            ext: ".exe"
            features: "--features include_pem_files"

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Dependencies (Linux)
        if: contains(matrix.os, 'ubuntu')
        run: sudo apt update && sudo apt install -y musl-tools gcc-aarch64-linux-gnu

      - name: Install Rust Target
        run: rustup target add ${{ matrix.target }}
        
      - name: Generate SSL Certificate and move to src
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes -subj "/CN=RFTPS"
          mv cert.pem key.pem src/

      - name: Build Application
        run: cargo build --release --target=${{ matrix.target }} ${{ matrix.features }}

      - name: Rename Executable
        run: mv target/${{ matrix.target }}/release/rftps${{ matrix.ext }} rftps-${{ matrix.target }}${{ matrix.ext }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: rftps-${{ matrix.target }}${{ matrix.ext }}
          path: rftps-${{ matrix.target }}${{ matrix.ext }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GH_PAT }}  # Use the PAT instead of GITHUB_TOKEN
          tag_name: ${{ github.ref_name }}
          files: artifacts/**
